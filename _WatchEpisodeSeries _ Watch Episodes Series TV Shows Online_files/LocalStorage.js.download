var _____WB$wombat$assign$function_____ = function(name) {return (self._wb_wombat && self._wb_wombat.local_init && self._wb_wombat.local_init(name)) || self[name]; };
if (!self.__WB_pmw) { self.__WB_pmw = function(obj) { this.__WB_source = obj; return this; } }
{
  let window = _____WB$wombat$assign$function_____("window");
  let self = _____WB$wombat$assign$function_____("self");
  let document = _____WB$wombat$assign$function_____("document");
  let location = _____WB$wombat$assign$function_____("location");
  let top = _____WB$wombat$assign$function_____("top");
  let parent = _____WB$wombat$assign$function_____("parent");
  let frames = _____WB$wombat$assign$function_____("frames");
  let opener = _____WB$wombat$assign$function_____("opener");

/**
 * LocalStorage.js
 *
 * Simple wrapper for localStorage with JSON stringify/parse support
 *
 * @author  Michael Wager <mail@mwager.de>
 * @licence MIT
 * @version 1.0
 */
(function() {
    'use strict';

    // slugify helper
    function parseKey(key) {
        key = key.replace(/\//g, '');
        key = key.replace(/[:]/g, '');
        key = key.replace(/[.]/g, '');
        return 'ls_' + key;
    }

    /**
     * Constructor
     */
    var LocalStorage = function() {
        this.storage = window.localStorage;

        var self = this;

        // test for support
        this.isValid = !!window.localStorage && (function() {
            // in mobile safari if safe browsing is enabled, window.storage
            // is defined but setItem calls throw exceptions.
            var success = true;
            var value = Math.random();
            try {
                self.storage.setItem(value, value);
            } catch (e) {
                success = false;
            }
            self.storage.removeItem(value);
            return success;
        })();

        if(!this.isValid) {
            throw 'No window.localStorage support in here: ' + navigator.userAgent;
        }
        if(!window.JSON) {
            throw 'No window.JSON support in here: ' + navigator.userAgent;
        }
    };

    LocalStorage.prototype = {
        /**
         * Get data by key
         *
         * @param {string} key  The key to get the data for
         * @return {mixed} The JSON.parse()`d data
         */
        get: function(key) {
            key = parseKey(key);

            var data = JSON.parse(
                this.storage.getItem(key)
            );

            return data;
        },

        /**
         * Store data to localStorage
         *
         * @param {string} key  The key
         * @param {mixed}  data The value, will be stringified
         */
        save: function(key, data) {
            key = parseKey(key);

            this.storage.setItem(key, JSON.stringify(data));
        },

        /**
         * Delete the data stored by 'key' if it exists.
         *
         * @param {string} key  The key
         */
        drop: function(key) {
            key = parseKey(key);

            this.storage.removeItem(key);
        },

        /**
         * Clear all data from localStorage
         */
        nuke: function() {
            this.storage.clear();
        }
    };



    // Export using AMD support...
    if(typeof define === 'function' && define.amd) {
        define([/* no deps */], function() {
            return LocalStorage;
        });
    }
    // ...or simply to the global namespace
    else {
        window.LocalStorage = LocalStorage;
    }
})();


}
/*
     FILE ARCHIVED ON 22:58:11 May 19, 2020 AND RETRIEVED FROM THE
     INTERNET ARCHIVE ON 22:01:23 Mar 18, 2023.
     JAVASCRIPT APPENDED BY WAYBACK MACHINE, COPYRIGHT INTERNET ARCHIVE.

     ALL OTHER CONTENT MAY ALSO BE PROTECTED BY COPYRIGHT (17 U.S.C.
     SECTION 108(a)(3)).
*/
/*
playback timings (ms):
  captures_list: 183.246
  exclusion.robots: 0.09
  exclusion.robots.policy: 0.079
  cdx.remote: 0.066
  esindex: 0.009
  LoadShardBlock: 141.952 (3)
  PetaboxLoader3.datanode: 181.102 (5)
  load_resource: 199.373 (2)
  PetaboxLoader3.resolve: 70.591 (2)
*/